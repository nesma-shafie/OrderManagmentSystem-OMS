// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// Create the following entities:
// ■ Users: userId, name, email, password, address, etc
// ■ Products: productId, name, description, price, stock, etc
// ■ Orders: orderId, orderDate, status, etc
// ■ Cart: cartId, etc

model Users {
  id       String      @id @default(uuid())
  name     String   @db.VarChar(255)
  password String   @db.VarChar(255)
  address  String   @db.VarChar(255)
  email    String   @unique
  cart     Carts?
  orders   Orders[]
}

model Carts {
  id     String      @id @default(uuid())
  userID String   @unique
  user   Users @relation(fields: [userID], references: [id])
  ProductsList CartProduct[]
}

model CartProduct {
  cartId    String   
  productId String   
  quantity  Int      @default(1)
  cart      Carts    @relation(fields: [cartId], references: [id])
  product   Products @relation(fields: [productId], references: [id])
  @@id([cartId, productId])
}

model Products {
  id          String      @id @default(uuid())
  name        String  @db.VarChar(255)
  description String  @db.VarChar(255)
  price       Int
  stock       Int
  Orders      OrderProduct[] 
  Carts       CartProduct[]
}

model Orders {
  id           String      @id @default(uuid())
  orderDate    DateTime    @default(now())
  status       OrderStatus @default(PENDING)
  totalPrice    Int         @default(0)
  Users        Users       @relation(fields: [usersId], references: [id])
  usersId      String
  productsList OrderProduct[]
}

model OrderProduct {
  orderId    String   
  productId String   
  quantity  Int      @default(1)
  order      Orders    @relation(fields: [orderId], references: [id])
  product   Products @relation(fields: [productId], references: [id])
  @@id([productId, orderId])
}
